#!/bin/env python3
# -*- coding: utf-8 -*-
import collections
import importlib
import json
import re
import traceback

import discord

_PluginSpec = collections.namedtuple("PluginSpec", (
    "module",
    "disallowed_channels",
    "disallowed_servers",
    "allowed_channels", #exceptions to allow responses on otherwise disallowed servers
))
_PLUGINS = tuple(_PluginSpec(
    importlib.import_module('.' + plugin_spec['plugin'], 'lib8squall_plugins'),
    plugin_spec.get("disallowedChannels", ()),
    plugin_spec.get("disallowedServers", ()),
    plugin_spec.get("allowedChannels", ()),
) for plugin_spec in json.load(open('./plugin-specs.json')))

class Magic8Squall(discord.Client):
    __user_notifaction_token_re = None
    
    async def on_ready(self):
        print('Logged on as {}'.format(self.user))
        self.__user_notifaction_token_re = re.compile(r'^<@!?{}>$'.format(self.user.id))
        
        await client.change_presence(
            status=discord.Status.idle,
            activity=discord.Game(name="@ me for commands; DM me to avoid spam"),
        )

    #https://discordpy.readthedocs.io/en/latest/api.html#message
    async def on_message(self, message):
        #no point in processing our own messages
        if message.author == self.user:
            return
            
        if message.mentions:
            #Don't try to interact with broad notifications
            if len(message.mentions) > 1:
                return
                
            #Someone else was @ed, which may be a "here's how you do this"; don't try to parse it
            if self.user not in message.mentions:
                return
                
        try:
            for plugin in _PLUGINS:
                if message.channel.type == discord.ChannelType.text:
                    if message.channel.id in plugin.disallowed_channels:
                        continue
                    if message.channel.guild.id in plugin.disallowed_servers:
                        if message.channel.id not in plugin.allowed_channels:
                            continue
                            
                if await plugin.module.handle_message(self, message):
                    break #message was handled
            else:
                if self.user in message.mentions and self.__user_notifaction_token_re.match(message.content.strip()):
                    help_summaries = []
                    for plugin in _PLUGINS:
                        if message.channel.type == discord.ChannelType.text:
                            if message.channel.id in plugin.disallowed_channels:
                                continue
                            if message.channel.guild.id in plugin.disallowed_servers:
                                if message.channel.id not in plugin.allowed_channels:
                                    continue
                        help_summaries.extend(plugin.module.get_help_summary(self, message))
                        
                    if help_summaries:
                        if message.channel.type == discord.ChannelType.text:
                            await message.channel.send(
                                content="\n\n".join(help_summaries),
                                delete_after=(4.0 * len(help_summaries)),
                            )
                        else:
                            await message.channel.send("\n\n".join(help_summaries))
        except Exception:
            traceback.print_exc()
            
client = Magic8Squall()
client.run(open('./discord-token').read().strip())
